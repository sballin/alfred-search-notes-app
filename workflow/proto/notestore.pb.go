// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: notestore.proto

package notestore

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//Represents a color
type Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Red   *float32 `protobuf:"fixed32,1,req,name=red" json:"red,omitempty"`
	Green *float32 `protobuf:"fixed32,2,req,name=green" json:"green,omitempty"`
	Blue  *float32 `protobuf:"fixed32,3,req,name=blue" json:"blue,omitempty"`
	Alpha *float32 `protobuf:"fixed32,4,req,name=alpha" json:"alpha,omitempty"`
}

func (x *Color) Reset() {
	*x = Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{0}
}

func (x *Color) GetRed() float32 {
	if x != nil && x.Red != nil {
		return *x.Red
	}
	return 0
}

func (x *Color) GetGreen() float32 {
	if x != nil && x.Green != nil {
		return *x.Green
	}
	return 0
}

func (x *Color) GetBlue() float32 {
	if x != nil && x.Blue != nil {
		return *x.Blue
	}
	return 0
}

func (x *Color) GetAlpha() float32 {
	if x != nil && x.Alpha != nil {
		return *x.Alpha
	}
	return 0
}

// Represents an attachment (embedded object)
type AttachmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachmentIdentifier *string `protobuf:"bytes,1,opt,name=attachment_identifier,json=attachmentIdentifier" json:"attachment_identifier,omitempty"`
	TypeUti              *string `protobuf:"bytes,2,opt,name=type_uti,json=typeUti" json:"type_uti,omitempty"`
}

func (x *AttachmentInfo) Reset() {
	*x = AttachmentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachmentInfo) ProtoMessage() {}

func (x *AttachmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachmentInfo.ProtoReflect.Descriptor instead.
func (*AttachmentInfo) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{1}
}

func (x *AttachmentInfo) GetAttachmentIdentifier() string {
	if x != nil && x.AttachmentIdentifier != nil {
		return *x.AttachmentIdentifier
	}
	return ""
}

func (x *AttachmentInfo) GetTypeUti() string {
	if x != nil && x.TypeUti != nil {
		return *x.TypeUti
	}
	return ""
}

// Represents a font
type Font struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FontName  *string  `protobuf:"bytes,1,opt,name=font_name,json=fontName" json:"font_name,omitempty"`
	PointSize *float32 `protobuf:"fixed32,2,opt,name=point_size,json=pointSize" json:"point_size,omitempty"`
	FontHints *int32   `protobuf:"varint,3,opt,name=font_hints,json=fontHints" json:"font_hints,omitempty"`
}

func (x *Font) Reset() {
	*x = Font{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Font) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Font) ProtoMessage() {}

func (x *Font) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Font.ProtoReflect.Descriptor instead.
func (*Font) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{2}
}

func (x *Font) GetFontName() string {
	if x != nil && x.FontName != nil {
		return *x.FontName
	}
	return ""
}

func (x *Font) GetPointSize() float32 {
	if x != nil && x.PointSize != nil {
		return *x.PointSize
	}
	return 0
}

func (x *Font) GetFontHints() int32 {
	if x != nil && x.FontHints != nil {
		return *x.FontHints
	}
	return 0
}

// Styles a "Paragraph" (any run of characters in an AttributeRun)
type ParagraphStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StyleType    *int32     `protobuf:"varint,1,opt,name=style_type,json=styleType,def=-1" json:"style_type,omitempty"`
	Alignment    *int32     `protobuf:"varint,2,opt,name=alignment" json:"alignment,omitempty"`
	IndentAmount *int32     `protobuf:"varint,4,opt,name=indent_amount,json=indentAmount" json:"indent_amount,omitempty"`
	Checklist    *Checklist `protobuf:"bytes,5,opt,name=checklist" json:"checklist,omitempty"`
}

// Default values for ParagraphStyle fields.
const (
	Default_ParagraphStyle_StyleType = int32(-1)
)

func (x *ParagraphStyle) Reset() {
	*x = ParagraphStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParagraphStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParagraphStyle) ProtoMessage() {}

func (x *ParagraphStyle) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParagraphStyle.ProtoReflect.Descriptor instead.
func (*ParagraphStyle) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{3}
}

func (x *ParagraphStyle) GetStyleType() int32 {
	if x != nil && x.StyleType != nil {
		return *x.StyleType
	}
	return Default_ParagraphStyle_StyleType
}

func (x *ParagraphStyle) GetAlignment() int32 {
	if x != nil && x.Alignment != nil {
		return *x.Alignment
	}
	return 0
}

func (x *ParagraphStyle) GetIndentAmount() int32 {
	if x != nil && x.IndentAmount != nil {
		return *x.IndentAmount
	}
	return 0
}

func (x *ParagraphStyle) GetChecklist() *Checklist {
	if x != nil {
		return x.Checklist
	}
	return nil
}

// Represents a checklist item
type Checklist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid []byte `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Done *int32 `protobuf:"varint,2,req,name=done" json:"done,omitempty"`
}

func (x *Checklist) Reset() {
	*x = Checklist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checklist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checklist) ProtoMessage() {}

func (x *Checklist) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checklist.ProtoReflect.Descriptor instead.
func (*Checklist) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{4}
}

func (x *Checklist) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Checklist) GetDone() int32 {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return 0
}

// Represents an object that has pointers to a key and a value, asserting
// somehow that the key object has to do with the value object.
type DictionaryElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *ObjectID `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value *ObjectID `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *DictionaryElement) Reset() {
	*x = DictionaryElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DictionaryElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionaryElement) ProtoMessage() {}

func (x *DictionaryElement) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionaryElement.ProtoReflect.Descriptor instead.
func (*DictionaryElement) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{5}
}

func (x *DictionaryElement) GetKey() *ObjectID {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DictionaryElement) GetValue() *ObjectID {
	if x != nil {
		return x.Value
	}
	return nil
}

// A Dictionary holds many DictionaryElements
type Dictionary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Element []*DictionaryElement `protobuf:"bytes,1,rep,name=element" json:"element,omitempty"`
}

func (x *Dictionary) Reset() {
	*x = Dictionary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dictionary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dictionary) ProtoMessage() {}

func (x *Dictionary) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dictionary.ProtoReflect.Descriptor instead.
func (*Dictionary) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{6}
}

func (x *Dictionary) GetElement() []*DictionaryElement {
	if x != nil {
		return x.Element
	}
	return nil
}

// ObjectIDs are used to identify objects within the protobuf, offsets in an arry, or
// a simple String.
type ObjectID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnsignedIntegerValue *uint64 `protobuf:"varint,2,req,name=unsigned_integer_value,json=unsignedIntegerValue" json:"unsigned_integer_value,omitempty"`
	StringValue          *string `protobuf:"bytes,4,req,name=string_value,json=stringValue" json:"string_value,omitempty"`
	ObjectIndex          *int32  `protobuf:"varint,6,req,name=object_index,json=objectIndex" json:"object_index,omitempty"`
}

func (x *ObjectID) Reset() {
	*x = ObjectID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectID) ProtoMessage() {}

func (x *ObjectID) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectID.ProtoReflect.Descriptor instead.
func (*ObjectID) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{7}
}

func (x *ObjectID) GetUnsignedIntegerValue() uint64 {
	if x != nil && x.UnsignedIntegerValue != nil {
		return *x.UnsignedIntegerValue
	}
	return 0
}

func (x *ObjectID) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *ObjectID) GetObjectIndex() int32 {
	if x != nil && x.ObjectIndex != nil {
		return *x.ObjectIndex
	}
	return 0
}

// Register Latest is used to identify the most recent version
type RegisterLatest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents *ObjectID `protobuf:"bytes,2,req,name=contents" json:"contents,omitempty"`
}

func (x *RegisterLatest) Reset() {
	*x = RegisterLatest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterLatest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterLatest) ProtoMessage() {}

func (x *RegisterLatest) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterLatest.ProtoReflect.Descriptor instead.
func (*RegisterLatest) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{8}
}

func (x *RegisterLatest) GetContents() *ObjectID {
	if x != nil {
		return x.Contents
	}
	return nil
}

// MapEntries have a key that maps to an array of key items and a value that points to an object.
type MapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *int32    `protobuf:"varint,1,req,name=key" json:"key,omitempty"`
	Value *ObjectID `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *MapEntry) Reset() {
	*x = MapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapEntry) ProtoMessage() {}

func (x *MapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapEntry.ProtoReflect.Descriptor instead.
func (*MapEntry) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{9}
}

func (x *MapEntry) GetKey() int32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *MapEntry) GetValue() *ObjectID {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents a "run" of characters that need to be styled/displayed/etc
type AttributeRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length         *int32          `protobuf:"varint,1,req,name=length" json:"length,omitempty"`
	ParagraphStyle *ParagraphStyle `protobuf:"bytes,2,opt,name=paragraph_style,json=paragraphStyle" json:"paragraph_style,omitempty"`
	Font           *Font           `protobuf:"bytes,3,opt,name=font" json:"font,omitempty"`
	FontWeight     *int32          `protobuf:"varint,5,opt,name=font_weight,json=fontWeight" json:"font_weight,omitempty"`
	Underlined     *int32          `protobuf:"varint,6,opt,name=underlined" json:"underlined,omitempty"`
	Strikethrough  *int32          `protobuf:"varint,7,opt,name=strikethrough" json:"strikethrough,omitempty"`
	Superscript    *int32          `protobuf:"varint,8,opt,name=superscript" json:"superscript,omitempty"` //Sign indicates super/sub
	Link           *string         `protobuf:"bytes,9,opt,name=link" json:"link,omitempty"`
	Color          *Color          `protobuf:"bytes,10,opt,name=color" json:"color,omitempty"`
	AttachmentInfo *AttachmentInfo `protobuf:"bytes,12,opt,name=attachment_info,json=attachmentInfo" json:"attachment_info,omitempty"`
}

func (x *AttributeRun) Reset() {
	*x = AttributeRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeRun) ProtoMessage() {}

func (x *AttributeRun) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeRun.ProtoReflect.Descriptor instead.
func (*AttributeRun) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{10}
}

func (x *AttributeRun) GetLength() int32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *AttributeRun) GetParagraphStyle() *ParagraphStyle {
	if x != nil {
		return x.ParagraphStyle
	}
	return nil
}

func (x *AttributeRun) GetFont() *Font {
	if x != nil {
		return x.Font
	}
	return nil
}

func (x *AttributeRun) GetFontWeight() int32 {
	if x != nil && x.FontWeight != nil {
		return *x.FontWeight
	}
	return 0
}

func (x *AttributeRun) GetUnderlined() int32 {
	if x != nil && x.Underlined != nil {
		return *x.Underlined
	}
	return 0
}

func (x *AttributeRun) GetStrikethrough() int32 {
	if x != nil && x.Strikethrough != nil {
		return *x.Strikethrough
	}
	return 0
}

func (x *AttributeRun) GetSuperscript() int32 {
	if x != nil && x.Superscript != nil {
		return *x.Superscript
	}
	return 0
}

func (x *AttributeRun) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *AttributeRun) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *AttributeRun) GetAttachmentInfo() *AttachmentInfo {
	if x != nil {
		return x.AttachmentInfo
	}
	return nil
}

// Overarching object in a ZNOTEDATA.ZDATA blob
type NoteStoreProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document *Document `protobuf:"bytes,2,req,name=document" json:"document,omitempty"`
}

func (x *NoteStoreProto) Reset() {
	*x = NoteStoreProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteStoreProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteStoreProto) ProtoMessage() {}

func (x *NoteStoreProto) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteStoreProto.ProtoReflect.Descriptor instead.
func (*NoteStoreProto) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{11}
}

func (x *NoteStoreProto) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

// A Document has a Note within it.
type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *int32 `protobuf:"varint,2,req,name=version" json:"version,omitempty"`
	Note    *Note  `protobuf:"bytes,3,req,name=note" json:"note,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{12}
}

func (x *Document) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Document) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

// A Note has both text, and then a lot of formatting entries.
// Other fields are present and not yet included in this proto.
type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteText     *string         `protobuf:"bytes,2,req,name=note_text,json=noteText" json:"note_text,omitempty"`
	AttributeRun []*AttributeRun `protobuf:"bytes,5,rep,name=attribute_run,json=attributeRun" json:"attribute_run,omitempty"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{13}
}

func (x *Note) GetNoteText() string {
	if x != nil && x.NoteText != nil {
		return *x.NoteText
	}
	return ""
}

func (x *Note) GetAttributeRun() []*AttributeRun {
	if x != nil {
		return x.AttributeRun
	}
	return nil
}

// Represents the top level object in a ZMERGEABLEDATA cell
type MergableDataProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MergableDataObject *MergableDataObject `protobuf:"bytes,2,req,name=mergable_data_object,json=mergableDataObject" json:"mergable_data_object,omitempty"`
}

func (x *MergableDataProto) Reset() {
	*x = MergableDataProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergableDataProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergableDataProto) ProtoMessage() {}

func (x *MergableDataProto) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergableDataProto.ProtoReflect.Descriptor instead.
func (*MergableDataProto) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{14}
}

func (x *MergableDataProto) GetMergableDataObject() *MergableDataObject {
	if x != nil {
		return x.MergableDataObject
	}
	return nil
}

// Similar to Document for Notes, this is what holds the mergeable object
type MergableDataObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                 *int32                   `protobuf:"varint,2,req,name=version" json:"version,omitempty"` // Asserted to be version in https://github.com/dunhamsteve/notesutils
	MergeableDataObjectData *MergeableDataObjectData `protobuf:"bytes,3,req,name=mergeable_data_object_data,json=mergeableDataObjectData" json:"mergeable_data_object_data,omitempty"`
}

func (x *MergableDataObject) Reset() {
	*x = MergableDataObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergableDataObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergableDataObject) ProtoMessage() {}

func (x *MergableDataObject) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergableDataObject.ProtoReflect.Descriptor instead.
func (*MergableDataObject) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{15}
}

func (x *MergableDataObject) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *MergableDataObject) GetMergeableDataObjectData() *MergeableDataObjectData {
	if x != nil {
		return x.MergeableDataObjectData
	}
	return nil
}

// This is the mergeable data object itself and has a lot of entries that are the parts of it
// along with arrays of key, type, and UUID items, depending on type.
type MergeableDataObjectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MergeableDataObjectEntry    []*MergeableDataObjectEntry `protobuf:"bytes,3,rep,name=mergeable_data_object_entry,json=mergeableDataObjectEntry" json:"mergeable_data_object_entry,omitempty"`
	MergeableDataObjectKeyItem  []string                    `protobuf:"bytes,4,rep,name=mergeable_data_object_key_item,json=mergeableDataObjectKeyItem" json:"mergeable_data_object_key_item,omitempty"`
	MergeableDataObjectTypeItem []string                    `protobuf:"bytes,5,rep,name=mergeable_data_object_type_item,json=mergeableDataObjectTypeItem" json:"mergeable_data_object_type_item,omitempty"`
	MergeableDataObjectUuidItem [][]byte                    `protobuf:"bytes,6,rep,name=mergeable_data_object_uuid_item,json=mergeableDataObjectUuidItem" json:"mergeable_data_object_uuid_item,omitempty"`
}

func (x *MergeableDataObjectData) Reset() {
	*x = MergeableDataObjectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeableDataObjectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeableDataObjectData) ProtoMessage() {}

func (x *MergeableDataObjectData) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeableDataObjectData.ProtoReflect.Descriptor instead.
func (*MergeableDataObjectData) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{16}
}

func (x *MergeableDataObjectData) GetMergeableDataObjectEntry() []*MergeableDataObjectEntry {
	if x != nil {
		return x.MergeableDataObjectEntry
	}
	return nil
}

func (x *MergeableDataObjectData) GetMergeableDataObjectKeyItem() []string {
	if x != nil {
		return x.MergeableDataObjectKeyItem
	}
	return nil
}

func (x *MergeableDataObjectData) GetMergeableDataObjectTypeItem() []string {
	if x != nil {
		return x.MergeableDataObjectTypeItem
	}
	return nil
}

func (x *MergeableDataObjectData) GetMergeableDataObjectUuidItem() [][]byte {
	if x != nil {
		return x.MergeableDataObjectUuidItem
	}
	return nil
}

// Each entry is part of the pbject. For example, one entry might be identifying which
// UUIDs are rows, and another might hold the text of a cell.
type MergeableDataObjectEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterLatest *RegisterLatest         `protobuf:"bytes,1,req,name=register_latest,json=registerLatest" json:"register_latest,omitempty"`
	Dictionary     *Dictionary             `protobuf:"bytes,6,opt,name=dictionary" json:"dictionary,omitempty"`
	Note           *Note                   `protobuf:"bytes,10,opt,name=note" json:"note,omitempty"`
	CustomMap      *MergeableDataObjectMap `protobuf:"bytes,13,opt,name=custom_map,json=customMap" json:"custom_map,omitempty"`
	OrderedSet     *OrderedSet             `protobuf:"bytes,16,opt,name=ordered_set,json=orderedSet" json:"ordered_set,omitempty"`
}

func (x *MergeableDataObjectEntry) Reset() {
	*x = MergeableDataObjectEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeableDataObjectEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeableDataObjectEntry) ProtoMessage() {}

func (x *MergeableDataObjectEntry) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeableDataObjectEntry.ProtoReflect.Descriptor instead.
func (*MergeableDataObjectEntry) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{17}
}

func (x *MergeableDataObjectEntry) GetRegisterLatest() *RegisterLatest {
	if x != nil {
		return x.RegisterLatest
	}
	return nil
}

func (x *MergeableDataObjectEntry) GetDictionary() *Dictionary {
	if x != nil {
		return x.Dictionary
	}
	return nil
}

func (x *MergeableDataObjectEntry) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *MergeableDataObjectEntry) GetCustomMap() *MergeableDataObjectMap {
	if x != nil {
		return x.CustomMap
	}
	return nil
}

func (x *MergeableDataObjectEntry) GetOrderedSet() *OrderedSet {
	if x != nil {
		return x.OrderedSet
	}
	return nil
}

// The Object Map uses its type to identify what you are looking at and
// then a map entry to do something with that value.
type MergeableDataObjectMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *int32      `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	MapEntry []*MapEntry `protobuf:"bytes,3,rep,name=map_entry,json=mapEntry" json:"map_entry,omitempty"`
}

func (x *MergeableDataObjectMap) Reset() {
	*x = MergeableDataObjectMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeableDataObjectMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeableDataObjectMap) ProtoMessage() {}

func (x *MergeableDataObjectMap) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeableDataObjectMap.ProtoReflect.Descriptor instead.
func (*MergeableDataObjectMap) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{18}
}

func (x *MergeableDataObjectMap) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *MergeableDataObjectMap) GetMapEntry() []*MapEntry {
	if x != nil {
		return x.MapEntry
	}
	return nil
}

// An ordered set is used to hold structural information for embedded tables
type OrderedSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ordering *OrderedSetOrdering `protobuf:"bytes,1,req,name=ordering" json:"ordering,omitempty"`
	Elements *Dictionary         `protobuf:"bytes,2,req,name=elements" json:"elements,omitempty"`
}

func (x *OrderedSet) Reset() {
	*x = OrderedSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderedSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderedSet) ProtoMessage() {}

func (x *OrderedSet) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderedSet.ProtoReflect.Descriptor instead.
func (*OrderedSet) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{19}
}

func (x *OrderedSet) GetOrdering() *OrderedSetOrdering {
	if x != nil {
		return x.Ordering
	}
	return nil
}

func (x *OrderedSet) GetElements() *Dictionary {
	if x != nil {
		return x.Elements
	}
	return nil
}

// The ordered set ordering identifies rows and columns in embedded tables, with an array
// of the objects and contents that map lookup values to originals.
type OrderedSetOrdering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Array    *OrderedSetOrderingArray `protobuf:"bytes,1,req,name=array" json:"array,omitempty"`
	Contents *Dictionary              `protobuf:"bytes,2,req,name=contents" json:"contents,omitempty"`
}

func (x *OrderedSetOrdering) Reset() {
	*x = OrderedSetOrdering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderedSetOrdering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderedSetOrdering) ProtoMessage() {}

func (x *OrderedSetOrdering) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderedSetOrdering.ProtoReflect.Descriptor instead.
func (*OrderedSetOrdering) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{20}
}

func (x *OrderedSetOrdering) GetArray() *OrderedSetOrderingArray {
	if x != nil {
		return x.Array
	}
	return nil
}

func (x *OrderedSetOrdering) GetContents() *Dictionary {
	if x != nil {
		return x.Contents
	}
	return nil
}

// This array holds both the text to replace and the array of UUIDs to tell what
// embedded rows and columns are.
type OrderedSetOrderingArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents   *Note                                `protobuf:"bytes,1,req,name=contents" json:"contents,omitempty"`
	Attachment []*OrderedSetOrderingArrayAttachment `protobuf:"bytes,2,rep,name=attachment" json:"attachment,omitempty"`
}

func (x *OrderedSetOrderingArray) Reset() {
	*x = OrderedSetOrderingArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderedSetOrderingArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderedSetOrderingArray) ProtoMessage() {}

func (x *OrderedSetOrderingArray) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderedSetOrderingArray.ProtoReflect.Descriptor instead.
func (*OrderedSetOrderingArray) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{21}
}

func (x *OrderedSetOrderingArray) GetContents() *Note {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *OrderedSetOrderingArray) GetAttachment() []*OrderedSetOrderingArrayAttachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

// This array identifies the UUIDs that are embedded table rows or columns
type OrderedSetOrderingArrayAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	Uuid  []byte `protobuf:"bytes,2,req,name=uuid" json:"uuid,omitempty"`
}

func (x *OrderedSetOrderingArrayAttachment) Reset() {
	*x = OrderedSetOrderingArrayAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notestore_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderedSetOrderingArrayAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderedSetOrderingArrayAttachment) ProtoMessage() {}

func (x *OrderedSetOrderingArrayAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_notestore_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderedSetOrderingArrayAttachment.ProtoReflect.Descriptor instead.
func (*OrderedSetOrderingArrayAttachment) Descriptor() ([]byte, []int) {
	return file_notestore_proto_rawDescGZIP(), []int{22}
}

func (x *OrderedSetOrderingArrayAttachment) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *OrderedSetOrderingArrayAttachment) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

var File_notestore_proto protoreflect.FileDescriptor

var file_notestore_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x59, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x05, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02,
	0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x02, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x22, 0x60, 0x0a, 0x0e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33,
	0x0a, 0x15, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x74, 0x69, 0x22, 0x61,
	0x0a, 0x04, 0x46, 0x6f, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x48, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x09, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x51, 0x0a, 0x11, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x0a,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x14, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x37, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3d, 0x0a, 0x08, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x0c, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x38, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x04,
	0x66, 0x6f, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x46, 0x6f, 0x6e,
	0x74, 0x52, 0x04, 0x66, 0x6f, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6e, 0x74, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x6f,
	0x6e, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x37, 0x0a, 0x0e,
	0x4e, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25,
	0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3f, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x0d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x22,
	0x5a, 0x0a, 0x11, 0x4d, 0x65, 0x72, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x0a, 0x14, 0x6d, 0x65, 0x72, 0x67, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x12, 0x6d, 0x65, 0x72, 0x67, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x12,
	0x4d, 0x65, 0x72, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x1a,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x17, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xc3, 0x02, 0x0a, 0x17, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x58, 0x0a, 0x1b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x18, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x1e, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x1a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x44, 0x0a,
	0x1f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x44, 0x0a, 0x1f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x1b, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x82, 0x02, 0x0a, 0x18, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x52, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x19, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x61, 0x70,
	0x12, 0x2c, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x22, 0x54,
	0x0a, 0x16, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x09,
	0x6d, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x22, 0x66, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x12,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x27, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x17,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4d,
	0x0a, 0x21, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
}

var (
	file_notestore_proto_rawDescOnce sync.Once
	file_notestore_proto_rawDescData = file_notestore_proto_rawDesc
)

func file_notestore_proto_rawDescGZIP() []byte {
	file_notestore_proto_rawDescOnce.Do(func() {
		file_notestore_proto_rawDescData = protoimpl.X.CompressGZIP(file_notestore_proto_rawDescData)
	})
	return file_notestore_proto_rawDescData
}

var file_notestore_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_notestore_proto_goTypes = []interface{}{
	(*Color)(nil),                             // 0: Color
	(*AttachmentInfo)(nil),                    // 1: AttachmentInfo
	(*Font)(nil),                              // 2: Font
	(*ParagraphStyle)(nil),                    // 3: ParagraphStyle
	(*Checklist)(nil),                         // 4: Checklist
	(*DictionaryElement)(nil),                 // 5: DictionaryElement
	(*Dictionary)(nil),                        // 6: Dictionary
	(*ObjectID)(nil),                          // 7: ObjectID
	(*RegisterLatest)(nil),                    // 8: RegisterLatest
	(*MapEntry)(nil),                          // 9: MapEntry
	(*AttributeRun)(nil),                      // 10: AttributeRun
	(*NoteStoreProto)(nil),                    // 11: NoteStoreProto
	(*Document)(nil),                          // 12: Document
	(*Note)(nil),                              // 13: Note
	(*MergableDataProto)(nil),                 // 14: MergableDataProto
	(*MergableDataObject)(nil),                // 15: MergableDataObject
	(*MergeableDataObjectData)(nil),           // 16: MergeableDataObjectData
	(*MergeableDataObjectEntry)(nil),          // 17: MergeableDataObjectEntry
	(*MergeableDataObjectMap)(nil),            // 18: MergeableDataObjectMap
	(*OrderedSet)(nil),                        // 19: OrderedSet
	(*OrderedSetOrdering)(nil),                // 20: OrderedSetOrdering
	(*OrderedSetOrderingArray)(nil),           // 21: OrderedSetOrderingArray
	(*OrderedSetOrderingArrayAttachment)(nil), // 22: OrderedSetOrderingArrayAttachment
}
var file_notestore_proto_depIdxs = []int32{
	4,  // 0: ParagraphStyle.checklist:type_name -> Checklist
	7,  // 1: DictionaryElement.key:type_name -> ObjectID
	7,  // 2: DictionaryElement.value:type_name -> ObjectID
	5,  // 3: Dictionary.element:type_name -> DictionaryElement
	7,  // 4: RegisterLatest.contents:type_name -> ObjectID
	7,  // 5: MapEntry.value:type_name -> ObjectID
	3,  // 6: AttributeRun.paragraph_style:type_name -> ParagraphStyle
	2,  // 7: AttributeRun.font:type_name -> Font
	0,  // 8: AttributeRun.color:type_name -> Color
	1,  // 9: AttributeRun.attachment_info:type_name -> AttachmentInfo
	12, // 10: NoteStoreProto.document:type_name -> Document
	13, // 11: Document.note:type_name -> Note
	10, // 12: Note.attribute_run:type_name -> AttributeRun
	15, // 13: MergableDataProto.mergable_data_object:type_name -> MergableDataObject
	16, // 14: MergableDataObject.mergeable_data_object_data:type_name -> MergeableDataObjectData
	17, // 15: MergeableDataObjectData.mergeable_data_object_entry:type_name -> MergeableDataObjectEntry
	8,  // 16: MergeableDataObjectEntry.register_latest:type_name -> RegisterLatest
	6,  // 17: MergeableDataObjectEntry.dictionary:type_name -> Dictionary
	13, // 18: MergeableDataObjectEntry.note:type_name -> Note
	18, // 19: MergeableDataObjectEntry.custom_map:type_name -> MergeableDataObjectMap
	19, // 20: MergeableDataObjectEntry.ordered_set:type_name -> OrderedSet
	9,  // 21: MergeableDataObjectMap.map_entry:type_name -> MapEntry
	20, // 22: OrderedSet.ordering:type_name -> OrderedSetOrdering
	6,  // 23: OrderedSet.elements:type_name -> Dictionary
	21, // 24: OrderedSetOrdering.array:type_name -> OrderedSetOrderingArray
	6,  // 25: OrderedSetOrdering.contents:type_name -> Dictionary
	13, // 26: OrderedSetOrderingArray.contents:type_name -> Note
	22, // 27: OrderedSetOrderingArray.attachment:type_name -> OrderedSetOrderingArrayAttachment
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_notestore_proto_init() }
func file_notestore_proto_init() {
	if File_notestore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_notestore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachmentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Font); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParagraphStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checklist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DictionaryElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dictionary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterLatest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteStoreProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergableDataProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergableDataObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeableDataObjectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeableDataObjectEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeableDataObjectMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderedSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderedSetOrdering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderedSetOrderingArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notestore_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderedSetOrderingArrayAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notestore_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_notestore_proto_goTypes,
		DependencyIndexes: file_notestore_proto_depIdxs,
		MessageInfos:      file_notestore_proto_msgTypes,
	}.Build()
	File_notestore_proto = out.File
	file_notestore_proto_rawDesc = nil
	file_notestore_proto_goTypes = nil
	file_notestore_proto_depIdxs = nil
}
